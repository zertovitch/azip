------------------------------------------------------------------------------
--                                                                          --
--  File generated by gate3                                                 --
--  Glade3 original file : azip.glade
--  Generation date  : 2013-01-20 20:00:26                                  --
--
--  Gate3 web site : https://sourceforge.net/projects/lorenz/
----
------------------------------------------------------------------------------
------------------------------------------------------------------------------
--  Legal licensing note:
--
--  Copyright (c) surname name
--  FRANCE
--  Send bug reports to : capitaine.nemo@jules-verne.fr
--
--  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
--  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
--  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
--  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
--  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
--  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
--  DEALINGS IN THE SOFTWARE.
--  NB: this is the MIT License, as found 12-Sep-2007 on the site
--  http://www.opensource.org/licenses/mit-license.php
------------------------------------------------------------------------------
-- units from Gtk
with Gtk;            use Gtk;
with Gtk.Main;
with Glib.Error;     use Glib.Error;
with Gtk.Widget;     use Gtk.Widget;
with Gtkada.Builder; use Gtkada.Builder;

-- Ada predefined units
with Ada.Text_IO;    use Ada.Text_IO;
with Ada.Exceptions; use Ada.Exceptions;

-- Application specific units
with Azip_Main_Callbacks; use Azip_Main_Callbacks;

procedure Azip is

   Builder       : Gtkada_Builder;
   Error         : Glib.Error.GError;
   GladeFileName : constant String := "azip.glade";

begin

   Gtk.Main.Init;

   -- Step 1: create a Builder and add the XML data

   Gtk_New (Builder);
   Error := Add_From_File (Builder, GladeFileName);
   if Error /= null then
      Put_Line ("Error : " & Get_Message (Error));
      Error_Free (Error);
      return;
   end if;

   --  Step 2: add calls to "Register_Handler" to associate your
   --  handlers with your callbacks.

   Register_Handler (Builder, "on_quit", On_Quit'Access);
   Register_Handler (Builder, "on_new_archive", On_New_Archive'Access);
   Register_Handler (Builder, "on_open_archive", On_Open_Archive'Access);
   Register_Handler
     (Builder,
      "on_save_archive_as",
      On_Save_Archive_As'Access);
   Register_Handler (Builder, "on_recent", On_Recent'Access);
   Register_Handler (Builder, "on_cut", On_Cut'Access);
   Register_Handler (Builder, "on_copy", On_Copy'Access);
   Register_Handler (Builder, "on_paste", On_Paste'Access);
   Register_Handler (Builder, "on_delete", On_Delete'Access);
   Register_Handler (Builder, "on_test_archive", On_Test_Archive'Access);
   Register_Handler
     (Builder,
      "on_recompress_archive",
      On_Recompress_Archive'Access);
   Register_Handler
     (Builder,
      "on_find_file_in_archive",
      On_Find_File_In_Archive'Access);
   Register_Handler
     (Builder,
      "on_find_contents_in_archive",
      On_Find_Contents_In_Archive'Access);
   Register_Handler
     (Builder,
      "on_compare_archive_with",
      On_Compare_Archive_With'Access);
   Register_Handler (Builder, "on_flat_view", On_Flat_View'Access);
   Register_Handler (Builder, "on_tree_view", On_Tree_View'Access);
   Register_Handler (Builder, "on_about", On_About'Access);
   Register_Handler
     (Builder,
      "on_open_toolbutton",
      On_Open_Toolbutton'Access);
   Register_Handler (Builder, "on_add_toolbutton", On_Add_Toolbutton'Access);
   Register_Handler
     (Builder,
      "on_suppress_toolbutton",
      On_Suppress_Toolbutton'Access);
   Register_Handler
     (Builder,
      "on_exam_toolbutton",
      On_Exam_Toolbutton'Access);

   -- Step 3: call Do_Connect. Once to connect all registered handlers

   Do_Connect (Builder);

   Put_Line ("Azip : loading and connexion of builder OK ");

   -- Step 3.5 : display the windows and all of their children.
   --            Remove objects than are not windows as necessary.

   Show_All (Get_Widget (Builder, "azip_main"));
   Gtk.Main.Main;

   --  Step 4: when the application terminates
   --          call Unref to free memory associated with the Builder.
   Unref (Builder);
   Put_Line ("Program Azip is finished !");

exception
   when Error : others =>
      Ada.Text_IO.Put_Line (Ada.Exceptions.Exception_Information (Error));

end Azip;
